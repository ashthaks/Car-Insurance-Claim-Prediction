# importing libraries
import joblib
import streamlit as st
import numpy as np

st.markdown("# Prediction")
st.sidebar.markdown("# Prediction")

# loading the saved model
ad_hpt = joblib.load(r"C:\Users\ashth\PycharmProjects\pythonClasses\MLProjects\car_insurance_claim_model.sav")

# converting the input data to the label encoder values.
clusters = {
    1: 0, 10: 1, 11: 2, 12: 3, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 2: 11, 20: 12, 21: 13
}
segments = {
    'A': 0, 'B1': 1, 'B2': 2, 'C1': 3, 'C2': 4
}
fuel_types = {
    'CNG': 0, 'Diesel': 1, 'Petrol': 2
}
torques = {'113Nm@4400rpm': 0, '170Nm@4000rpm': 1, '200Nm@1750rpm': 2, '200Nm@3000rpm': 3,
           '250Nm@2750rpm': 4, '60Nm@3500rpm': 5, '82.1Nm@3400rpm': 6, '85Nm@3000rpm': 7,
           '91Nm@4250rpm': 8
           }
steering_types = {
    'Electric': 0, 'Manual': 1, 'Power': 2
}

def claim_predictions(input_data):
    # st.write(input_data)
    # converting string data to dataset dtype.
    input_data[0] = float(input_data[0])
    input_data[1] = float(input_data[1])
    input_data[2] = float(input_data[2])
    input_data[3] = clusters.get(input_data[3])
    input_data[4] = int(input_data[4])
    input_data[5] = segments.get(input_data[5])
    input_data[6] = fuel_types.get(input_data[6])
    input_data[7] = torques.get(input_data[7])
    input_data[8] = 1 if input_data[8] == 'Yes' else 0
    input_data[9] = 1 if input_data[9] == 'Yes' else 0
    input_data[10] = int(input_data[10])
    input_data[11] = int(input_data[11])
    input_data[12] = steering_types.get(input_data[12])
    input_data[13] = int(input_data[13])
    input_data[14] = int(input_data[14])
    input_data[15] = 1 if input_data[15] == 'Yes' else 0
    input_data[16] = 1 if input_data[16] == 'Yes' else 0
    input_data[17] = 1 if input_data[17] == 'Yes' else 0
    input_data[18] = 1 if input_data[18] == 'Yes' else 0
    input_data[19] = 1 if input_data[19] == 'Yes' else 0
    input_data[20] = 1 if input_data[20] == 'Yes' else 0
    input_data[21] = 1 if input_data[21] == 'Yes' else 0
    input_data[22] = 1 if input_data[22] == 'Yes' else 0

    # # changing the input data to numpy array
    input_data_array = np.asarray(input_data)
    # st.write(input_data_array)

    # # reshape the array as we are predicting for one instance
    input_reshaped = input_data_array.reshape(1, -1)

    # prediction using saved model
    prediction = ad_hpt.predict(input_reshaped)
    if prediction[0] == 0:
        return 'No Claim'
    else:
        return 'Claim'


# getting the input data from the user
def show_predict_page():
    policy_tenure = st.text_input("Time period of the policy")
    age_of_car = st.text_input("Age of the car in year")
    age_of_policyholder = st.text_input("Age of the Policy Holder")
    area_cluster = st.slider("Area cluster of the policy holder", 0, 21, 0)
    population_density = st.text_input("Population density of the policy holder city")
    segment = st.selectbox("Segment of the car", ('A', 'C1', 'C2', 'B2', 'B1'), index=None,
                           placeholder="Choose an option", )
    fuel_type = st.selectbox("Fuel Type", ("CNG", "Diesel", "Petrol"), index=None, placeholder="Choose an option")
    max_torque = st.selectbox("Maximum Torque generated by the car", (
        '60Nm@3500rpm', '113Nm@4400rpm', '91Nm@4250rpm', '250Nm@2750rpm', '200Nm@3000rpm', '82.1Nm@3400rpm',
        '200Nm@1750rpm', '85Nm@3000rpm', '170Nm@4000rpm'), index=None, placeholder="Choose an option", )
    is_adjustable_steering = st.radio("Adjustable Steering ", ['Yes', 'No'], horizontal=True)
    is_parking_sensors = st.radio("Parking Sensors ", ['Yes', 'No'], horizontal=True)
    displacement = st.text_input("Engine displacement of the car")
    cylinder = st.text_input("Number of cylinders present in the engine of the car")
    steering_type = st.selectbox("Type of the steering present in the car", ("Electrical", "Power", 'Manual'),
                                 index=None, placeholder="Choose an option", )
    length = st.text_input("Length of the car (Millimetre)")
    width = st.text_input("Width of the car (Millimetre)")
    is_front_fog_lights = st.radio("Front fog lights ", ['Yes', 'No'], horizontal=True)
    is_brake_assist = st.radio("Brake assistance feature ", ['Yes', 'No'], horizontal=True)
    is_power_door_locks = st.radio("Power door lock", ['Yes', 'No'], horizontal=True)
    is_central_locking = st.radio("Central locking feature ", ['Yes', 'No'], horizontal=True)
    is_driver_seat_height_adjustable = st.radio("Height of the driver seat is adjustable ", ['Yes', 'No'],
                                                horizontal=True)
    is_day_night_rear_view_mirror = st.radio("Day & night rearview mirror ", ['Yes', 'No'], horizontal=True)
    is_ecw = st.radio("Engine Check Warning ", ['Yes', 'No'], horizontal=True)
    is_speed_alert = st.radio("Speed Alert ", ['Yes', 'No'], horizontal=True)

    # code for predictions
    prediction = ""

    if st.button("Submit"):
        prediction = claim_predictions(
            [policy_tenure, age_of_car, age_of_policyholder, area_cluster, population_density, segment,
             fuel_type, max_torque, is_adjustable_steering, is_parking_sensors, displacement, cylinder, steering_type,
             length, width, is_front_fog_lights, is_brake_assist, is_power_door_locks, is_central_locking,
             is_driver_seat_height_adjustable,
             is_day_night_rear_view_mirror, is_ecw, is_speed_alert])
    st.success(prediction)


show_predict_page()
